input {
  file {
   type => "update"
   path => "/home/aswin/topcoder/logs/mylogs.log"
   codec => json
   start_position => beginning
  }
  file {
   type => "delete"
   path => "/home/aswin/topcoder/delete_users"
   codec => json
   start_position => beginning
  }
}

filter {
  mutate {
    rename => { "challengeid" => "challengeId" }
  }
  if [type] == "update" {
  aggregate {  
    task_id => "_%{challengeId}"
    code => "map['users'] ||= Array.new;
             map[event['userid']] ||= Hash.new;
             map[event['userid']]['id'] = event['userid'];
             map[event['userid']]['handle'] = event['handle'];
             if map[event['userid']]['roles']
                unless map[event['userid']]['roles'].include?(event['name'])
                  map[event['userid']]['roles'].push(event['name']);
                end
             else
                 map[event['userid']]['roles'] = Array.new;
                 map[event['userid']]['roles'].push(event['name']);
                 map['users'].push(map[event['userid']]);
             end
             event['users'] = map['users'];"
    timeout => 1800
    remove_field => ["@version", "@timestamp", "name", "userid", "handle","type"]
  }
  }             
  if [type]=="delete" {
   aggregate {
     task_id => "_%{challengeId}"
     code => "map['users'] ||= Array.new;
              if map['users'].any? { |h| h['id'].include?(event['userid']) }
               if map[event['userid']]['roles'].include?(event['name']) 
                 map[event['userid']]['roles'].delete(event['name']);
               end
              end
              map['users'].reject! { |x| x['roles'].empty? } and map[event['userid']]=nil;
              event['users'] = map['users'];"
     timeout => 1800
     remove_field => ["@version", "@timestamp", "name", "userid", "handle","type"]
   }
  }
}
output {
    elasticsearch {
      hosts => localhost
      index => challenges
      document_type => challenge
      document_id => "%{challengeId}"
      action => "update"
      doc_as_upsert => true
      flush_size => 1000
    }
    stdout { codec => rubydebug }
}
